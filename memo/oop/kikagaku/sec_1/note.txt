📝 オブジェクト指向とオブジェクトスコープについてのまとめ

1️⃣ オブジェクト指向とは？
	•	究極の整理整頓術
	•	データと操作（振る舞い）を1つにまとめたものを「オブジェクト」と呼ぶ。
	•	オブジェクト同士の役割を明確にし、整理整頓しながら組み合わせてシステムを構築する。
	•	イメージ図
	•	システムを構成する様々なオブジェクト（例：正社員・パート・アルバイト）が相互作用して機能するイメージ。
	•	例：雇用形態
	•	従業員という大きな枠（システム）があり、その中に正社員、パート、アルバイトというオブジェクトが存在する。
	•	それぞれのオブジェクトは「名前（データ）」と「働く（操作）」を持ち、一体として扱うことで役割を明確にできる。

2️⃣ オブジェクト指向のメリット
	•	保守性の向上（扱いやすくなる）
	•	再利用性の向上（既存のオブジェクトを別の場面でも使いやすい）
	•	適切に切り分けることで、システム全体の整理整頓がしやすくなる。

3️⃣ オブジェクトスコープとは？
	•	「システムをオブジェクト同士の相互作用として捉える」という考え方。
	•	各オブジェクトに役割を持たせ、それぞれの関わりを図式化して整理する。

4️⃣ オブジェクト指向の歴史と背景
	•	1970年代から発展した考え方。
	•	元々はシミュレーション学から生まれた。
	•	現実世界の「物」や「行動」をコードで表現するための便利な仕組みとして登場。
	•	人間にとって行動や仕組みを理解しやすくなるため、多くのプログラミング言語（Python、Java、C++など）で採用されている。

⸻

📝 クラスとインスタンスの関係
	•	クラス
	•	設計図（テンプレート）
	•	データ（属性）や操作（メソッド）をどう持たせるかを定義する。
	•	インスタンス
	•	クラスをもとに実体化したもの。
	•	クラスを実際のメモリ上に配置したものがインスタンス。

⸻

【具体例：魚のクラス】
	•	魚クラス（設計図）
	•	データ：色
	•	操作：泳ぐ
	•	魚インスタンス（実体）
	•	例：
	•	魚1（青い魚、泳ぐ）
	•	魚2（ピンクの魚、泳ぐ）
	•	魚3（黄色の魚、泳ぐ）

⸻

📝 ポイントまとめ
	•	オブジェクト指向＝データと操作を一つにまとめた究極の整理整頓術。
	•	オブジェクトスコープ＝オブジェクト同士の相互作用でシステムを捉える。
	•	クラス＝設計図、インスタンス＝実体。
	•	メリット：保守性・再利用性が高まる。
	•	1970年代から発展し、多くの言語で採用されている。

⸻
