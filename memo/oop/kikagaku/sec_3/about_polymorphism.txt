「ポリモーフィズム」について

⸻

① ポリモーフィズム（多態性）とは？

ポリモーフィズムとは、同じ名前のメソッド（関数）を持つ異なるクラスのオブジェクトを、同じように扱える性質のことです。

つまり、
	•	あるメッセージ（メソッド呼び出し）を送っても
	•	オブジェクトの種類によって動作（実装）が変わる

ということです。

⸻

② 例を見てみよう！

まずはクラスを2つ作ります。「犬」と「猫」というクラスです。
どちらも同じ名前の speak() メソッドを持っていますが、中身が違います。

class Dog:
    def speak(self):
        return "ワンワン！"

class Cat:
    def speak(self):
        return "ニャー！"

ここで、犬も猫も「話す」という動作を持っていますが、その鳴き声は違いますよね。

⸻

③ ポリモーフィズムを使ってみる

では、犬と猫のインスタンスを作って、それぞれに speak() メソッドを呼び出してみます。

animals = [Dog(), Cat()]

for animal in animals:
    print(animal.speak())

結果

ワンワン！
ニャー！

ここでポイントなのは：
	•	Dog クラスも Cat クラスも同じ speak() メソッドを持っているので
	•	for文の中で 同じように扱える ということです。

⸻

④ ダックタイピングとは？

Pythonは「ダックタイピング」という考え方を採用しています。

🔍 ダックタイピングとは：
「もし見た目がアヒルで、アヒルのように鳴くなら、それはアヒルである」という考え方です。

Pythonではクラスの継承関係を気にせず、
	•	そのオブジェクトが 必要なメソッドや属性を持っていれば 同じように扱える
という柔軟な考え方なんです。

⸻

⑤ 継承関係がない例

上の例では Dog と Cat は別々のクラスで、継承関係がありません。
でも、両方に同じ名前の speak() メソッドがあれば、for文の中で同じように呼べるわけです。

class Duck:
    def speak(self):
        return "クワックワッ"

animals = [Dog(), Cat(), Duck()]

for animal in animals:
    print(animal.speak())

結果

ワンワン！
ニャー！
クワックワッ

これが「ダックタイピング」のイメージです。

⸻

⑥ まとめ

✅ ポリモーフィズム：
	•	同じメソッドを呼んでも、オブジェクトごとに動作が違う

✅ ダックタイピング：
	•	継承関係がなくても、必要なメソッドを持っていれば同じように扱える
	•	Pythonはこれをとても柔軟に実現できる

⸻
