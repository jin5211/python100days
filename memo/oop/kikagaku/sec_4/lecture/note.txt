sec_4 の概要

- モジュールとは
- モジュールの利用
- テスト用プログラムの記述
- パッケージ

======================================================
モジュールとは、
-------------

関数やクラスなどの定義やぶんが入ったファイルです。

プログラムが長くなると可読性や保守性が落ちるため
プログラムをいくつかのファイルに分割する必要が出てきます。

作成した関数やクラスを再利用して
他のプログラムで使用したいと思うことがあります。

Pythonで提供される豊富な機能も
標準ライブラリと呼ばれるモジュールとして提供されています。

また、自作したクラスや関数をモジュールとして保存し、
他のプログラムから利用することもできます。

Pythonでは拡張子「.py」のテキストファイルに
プログラムを保存するだけでモジュールにすることができます。
この時、モジュール名はファイル名から拡張子を除いた名前になります

例、player.py
 -> モジュール名は[player]となる

モジュールの利用方法
-----------------

モジュールのインポート
-------------------

他のモジュールに含まれるプログラムを利用するには、
利用するモジュールを読み込む必要があります。

モジュールを読み込むには import文 を用います。

書式
import モジュール名、[, モジュール名]

====================================================================
テスト用プログラムの記述
---------------------

if __name__ == "__main__":
    # テスト用コードや実行処理

⸻

🔍 そもそも __name__ って何？

Pythonのスクリプト（ファイル）を実行すると、Pythonはそのスクリプトを1つの「モジュール」として扱います。
そのとき、Pythonは自動的にそのモジュールに名前（__name__）をつけます。

具体的に：
	•	もし 直接そのファイルを実行した場合 → __name__ は "__main__" になります。
	•	もし 別のファイルからインポートされた場合 → __name__ にはファイル名（モジュール名）が入ります（例："my_module"）。

⸻

🔑 どんなときに役立つの？

例えば、ファイルにクラスや関数の定義とテストコードを一緒に書きたい場合。

# my_module.py

def greet(name):
    print(f"Hello, {name}!")

# テストコード
if __name__ == "__main__":
    greet("Alice")

使い方

✅ 直接このファイルを実行した場合 → greet("Alice") が呼ばれる。
✅ 他のファイルからインポートした場合 → greet("Alice") は呼ばれない（関数だけ読み込まれる）。

⸻

📝 まとめ

🔸 if __name__ == "__main__": は
「このファイルが直接実行されたときだけ、ここから下を実行してね」という意味です。

⸻

🔧 テスト用プログラムでよく使われる理由
	•	ライブラリとして再利用できる
（importしたときに勝手にテストが走らない）
	•	ファイル単体で動作確認ができる
（直接実行すればテストが動く）

⸻

🌟 具体例

# sample.py

def add(a, b):
    return a + b

# テストコード
if __name__ == "__main__":
    result = add(3, 5)
    print(f"3 + 5 = {result}")

	•	直接実行 → 結果：3 + 5 = 8
	•	import  → 何も表示されない（必要なときに add() を呼んで使う）

⸻

===============================================================
パッケージ
---------


🗂️ パッケージってなに？

Pythonのパッケージとは：
	•	複数の関連するモジュールをまとめたディレクトリ（フォルダ）のこと。
	•	そのディレクトリに**__init__.py** という特別なファイルを置くと、Pythonが「ここはパッケージなんだ」と認識します。

⸻

🛠️ パッケージ化のステップ

① ディレクトリ構造を作る

例えば、動物関連のプログラムをまとめたいとします🐶。

my_animals/
│
├── __init__.py
├── dog.py
├── cat.py
└── bird.py

✅ ポイント：
	•	ディレクトリ名（例：my_animals）がパッケージ名になります。
	•	__init__.py は、パッケージとして認識させるための“目印”です（Python 3.3以降は省略してもパッケージとして動きますが、通常は作ります）。

⸻

② モジュールを作成する

例えば、dog.py に以下のコードを書きます。

# dog.py

def bark():
    print("ワンワン！")

同様に、cat.py と bird.py にもそれぞれ関数やクラスを書きます。

⸻

③ init.py にまとめる（オプショナル）

# __init__.py

from .dog import bark
from .cat import meow
from .bird import tweet

# __all__ = ["bark", "meow", "tweet"]  # import * したときに読み込まれるシンボルを指定（任意）

✅ ここで関数をまとめておくと、パッケージを読み込むときに便利です。

⸻

④ パッケージを利用する

同じディレクトリに以下のスクリプトを置きます（またはPythonパスが通るように設定）。

# main.py

import my_animals

my_animals.bark()  # ワンワン！

または

# main.py

from my_animals import bark

bark()  # ワンワン！


⸻

💡 さらに発展
	•	サブパッケージ（ディレクトリの中にさらにパッケージを作る）
	•	setup.py でインストール可能にする（配布したいとき）
	•	名前空間パッケージ（複数ディレクトリにまたがるパッケージ）

⸻

📝 まとめ

✅ 1. ディレクトリを作る（パッケージ名）
✅ 2. その中にモジュール（.pyファイル）を作る
✅ 3. __init__.py を置いてパッケージ化
✅ 4. import パッケージ名 で呼び出せる

⸻
