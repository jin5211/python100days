仮想環境とは？
同じコンピューターの中にPythonの実行環境を複数作ることができるもの
プロジェクトごとに仮想環境を作る
例:
環境A -> 日記アプリ用(Django)
環境B -> 会計アプリ用(PySimpleGUI)
環境C -> 集計用(OpenPyXL)

Python自体をインストールしてPythonバージョンを管理・切り替えできるものがある

環境が [環境A] と [環境B] があるとしましょう。

環境A
- Python 3.12.1
- Numpy 2.1.0

環境B
- Python 3.12.1
- Numpy 2.1.0

Case_1
環境Aと環境BのPythonのバージョンを [ツールa] で管理し、Numpyなどのパッケージのバージョン
を管理するツールは別の [ツールb] を使用するケース

Case_2
その環境二つの Python自体とその他のパッケージのパージョンを一つのツールで
まとめて管理するケース

仮想環境用のツール != パッケージマネージャ(pipとか)

仮想環境用のツール = 環境を保存・切り替え
パッケージマネージャ = ライブラリーをインストール

※ 一部の仮想環境用ツールではパッケージマネージャの機能が含まれるものがある

1. Pyenv
概要: 特定のバージョンのPythonをインストール、Pythonのバージョンを切り替え

Homebrew で pyenv をインストールする
brew install pyenv

pyenv で Python をバージョン指定してインストールする
例:
インストール可能なPythonバージョンのリストを表示する
pyenv install --list

その中からインストールしたいバージョンを指定してインストールする
pyenv install 3.12.3

マシンの中にインストール済みかつ使用可能なPythonバージョンを確認する
pyenv versions

pythonバージョンの切り替え
どのディレクトリでも同じ Pythonのバージョンが使える globalを使う(3.12.3を使いたい例)
pyenv global 3.12.3

特定のフォルダーの中(再起的)でだけ、Pythonのバージョンを切り替えるlocalを使う
projectフォルダまで移動
pyenv local 3.11.1
python -V

注意: パッケージの管理は pyenv では行わない

2. venv
- Python 3.3以上に Python 標準でついている仮想環境用のツール
- 簡単にパッケージとかも管理できる
- Python をインストールすることはできない
- パッケージを管理して切り替えるためのツール
- 操作が簡単で分かりやすい / シンプル
- Python初心者におすすめ(勉強用の環境)
- チーム開発、公開等に不向き

特定のプロジェクトディレクトリまで移動
pyenv localコマンドを使って 自分が作りたい仮想環境の Python versionに切り替える
pyenv local 3.11.5

一度 Python version と パッケージたちのバージョンを確認する
python -V
pip list

仮想環境を作る
python -m venv .(作りたい仮想環境の名前)
python -m venv .abc

作った 仮想環境に切り替える
source .abc/bin/activate

prompt の一番左のところに (.仮想環境の名前) が出てくる
一度 Python version と パッケージたちのバージョンを確認する
python -V
pip list

この時点で自分の好みのライブラリーをバージョン指定してインストールする
例
pip install numpy==2.1.0
pip install gspread==6.1.2

一度 Python version と パッケージたちのバージョンを確認する
python -V
pip list

作った仮想環境から抜けたい時は
deactivate

一度 Python version と パッケージたちのバージョンを確認してみると違うなっていうことが分かる
python -V
pip list

その他
3. conda
4. poetry
